{
    "id": 8536,
    "name": "Tehnike programiranja (2016\/2017), Tutorijal 3, Zadatak 6",
    "languages": [
        "C++"
    ],
    "tools": {
        "compile": {
            "require": "g++",
            "features": [
                "optimize",
                "warn",
                "pedantic",
                "C++14"
            ]
        },
        "compile[debug]": {
            "require": "g++",
            "features": [
                "debug",
                "C++14"
            ]
        },
        "execute": {
            "environment": {
                "timeout": 10,
                "memory": 1000000
            }
        },
        "debug": [],
        "profile[memcheck]": {
            "require": "valgrind",
            "features": [
                "memcheck"
            ],
            "environment": {
                "timeout": 10
            }
        },
        "profile[sgcheck]": {
            "require": "valgrind",
            "features": [
                "sgcheck"
            ],
            "environment": {
                "timeout": 10
            }
        }
    },
    "tests": [
        {
            "compile": [],
            "options": [
                "silent",
                "terminate"
            ]
        },
        {
            "id": 3236,
            "patch": [
                {
                    "position": "main",
                    "code": "\/\/AT1: Primjer iz postavke\n_main();",
                    "use_markers": true
                }
            ],
            "compile[debug]": [],
            "execute": {
                "environment": {
                    "stdin": "4\n3 124 -11 9\n6\n42 1001 0 -213 16 5"
                },
                "expect": [
                    "Unesite broj elemenata prvog vektora: Unesite elemente prvog vektora: Unesite broj elemenata drugog vektora: Unesite elemente drugog vektora:\n    126   3003      0   -639     48     15\n   5208 124124      0 -26412   1984    620\n   -462 -11011      0   2343   -176    -55\n    378   9009      0  -1917    144     45"
                ]
            },
            "debug": [],
            "profile[memcheck]": {
                "environment": {
                    "stdin": "4\n3 124 -11 9\n6\n42 1001 0 -213 16 5"
                }
            },
            "profile[sgcheck]": {
                "environment": {
                    "stdin": "4\n3 124 -11 9\n6\n42 1001 0 -213 16 5"
                }
            }
        },
        {
            "id": 3237,
            "patch": [
                {
                    "position": "main",
                    "code": "\/\/AT2: Svi negativni brojevi u matrici. Na rezultat NajvecaSirina se mora dodati +2 zbog minusa i jednog dodatnog mjesta. U ovom slucaju je to 9.\n_main();",
                    "use_markers": true
                }
            ],
            "compile[debug]": [],
            "execute": {
                "environment": {
                    "stdin": "5\n-154 -666 -7 -21 -223\n7\n12 54 123 11 332 7777 898"
                },
                "expect": [
                    "Unesite broj elemenata prvog vektora: Unesite elemente prvog vektora: Unesite broj elemenata drugog vektora: Unesite elemente drugog vektora:\n    -1848    -8316   -18942    -1694   -51128 -1197658  -138292\n    -7992   -35964   -81918    -7326  -221112 -5179482  -598068\n      -84     -378     -861      -77    -2324   -54439    -6286\n     -252    -1134    -2583     -231    -6972  -163317   -18858\n    -2676   -12042   -27429    -2453   -74036 -1734271  -200254"
                ]
            },
            "debug": [],
            "profile[memcheck]": {
                "environment": {
                    "stdin": "5\n-154 -666 -7 -21 -223\n7\n12 54 123 11 332 7777 898"
                }
            },
            "profile[sgcheck]": {
                "environment": {
                    "stdin": "5\n-154 -666 -7 -21 -223\n7\n12 54 123 11 332 7777 898"
                }
            }
        },
        {
            "id": 3238,
            "patch": [
                {
                    "position": "main",
                    "code": "\/\/AT3: Testiranje funkcije KroneckerovProizvod sa praznom matricom\n\/\/NAPOMENA: Znak \"_\" je sastavni dio autotesta\nstd::vector<int> v1;\nstd::vector<int> v2;\nstd::vector<std::vector<int>> mat = KroneckerovProizvod(v1, v2);\n\nfor(int i=0; i<mat.size(); i++)\n{\n   for(int j=0; j<mat[i].size(); j++)\n     std::cout << mat[i][j];\n   \n   std::cout << std::endl;\n}\nstd::cout << \"_\";",
                    "use_markers": true
                }
            ],
            "compile[debug]": [],
            "execute": {
                "expect": [
                    "_"
                ]
            },
            "debug": [],
            "profile[memcheck]": [],
            "profile[sgcheck]": []
        },
        {
            "id": 3239,
            "patch": [
                {
                    "position": "main",
                    "code": "\/\/AT4: Testiranje funkcije KroneckerovProizvod sa praznom matricom\n\/\/NAPOMENA: Znak \"_\" je sastavni dio autotesta\nstd::vector<int> v1(3,1);\nstd::vector<int> v2;\nstd::vector<std::vector<int>> mat = KroneckerovProizvod(v1, v2);\n\nfor(int i=0; i<mat.size(); i++)\n{\n   for(int j=0; j<mat[i].size(); j++)\n     std::cout << mat[i][j];\n   \n   std::cout << std::endl;\n}\nstd::cout << \"_\";",
                    "use_markers": true
                }
            ],
            "compile[debug]": [],
            "execute": {
                "expect": [
                    "_"
                ]
            },
            "debug": [],
            "profile[memcheck]": [],
            "profile[sgcheck]": []
        },
        {
            "id": 3240,
            "patch": [
                {
                    "position": "main",
                    "code": "\/\/AT5: Testiranje funkcije KroneckerovProizvod sa matricom 1x1\n\/\/NAPOMENA: Znak \"_\" je sastavni dio autotesta\nstd::vector<int> v1(1,2);\nstd::vector<int> v2(1,3);\nstd::vector<std::vector<int>> mat = KroneckerovProizvod(v1, v2);\n\nfor(int i=0; i<mat.size(); i++)\n{\n   for(int j=0; j<mat[i].size(); j++)\n     std::cout << mat[i][j];\n   \n   std::cout << std::endl;\n}\nstd::cout << \"_\";",
                    "use_markers": true
                }
            ],
            "compile[debug]": [],
            "execute": {
                "expect": [
                    "6\n_"
                ]
            },
            "debug": [],
            "profile[memcheck]": [],
            "profile[sgcheck]": []
        },
        {
            "id": 3241,
            "patch": [
                {
                    "position": "main",
                    "code": "\/\/AT6: Testiranje sa pojavom donje granice cjelobrojne vrijednosti u matrici\n\/\/NAPOMENA: Znak \"_\" je sastavni dio autotesta\nstd::vector<int> v1{1,0};\nstd::vector<int> v2{1,std::numeric_limits<int>::min()};\nstd::vector<std::vector<int>> mat = KroneckerovProizvod(v1, v2);\n\nfor(int i=0; i<mat.size(); i++)\n{\n   for(int j=0; j<mat[i].size(); j++)\n     std::cout << mat[i][j] << \" \";\n   \n   std::cout << std::endl;\n}\nstd::cout << \"_\";",
                    "use_markers": true
                },
                {
                    "position": "top_of_file",
                    "code": "#include<limits>",
                    "use_markers": true
                }
            ],
            "compile[debug]": [],
            "execute": {
                "expect": [
                    "1 -2147483648 \n0 0 \n_"
                ]
            },
            "debug": [],
            "profile[memcheck]": [],
            "profile[sgcheck]": []
        },
        {
            "id": 3242,
            "patch": [
                {
                    "position": "main",
                    "code": "\/\/AT7: Testiranje sa pojavom gornje granice cjelobrojne vrijednosti u matrici\n\/\/NAPOMENA: Znak \"_\" je sastavni dio autotesta\nstd::vector<int> v1{1,0};\nstd::vector<int> v2{1,std::numeric_limits<int>::max()};\nstd::vector<std::vector<int>> mat = KroneckerovProizvod(v1, v2);\n\nfor(int i=0; i<mat.size(); i++)\n{\n   for(int j=0; j<mat[i].size(); j++)\n     std::cout << mat[i][j] << \" \";\n   \n   std::cout << std::endl;\n}\nstd::cout << \"_\";",
                    "use_markers": true
                },
                {
                    "position": "top_of_file",
                    "code": "#include<limits>",
                    "use_markers": true
                }
            ],
            "compile[debug]": [],
            "execute": {
                "expect": [
                    "1 2147483647 \n0 0 \n_"
                ]
            },
            "debug": [],
            "profile[memcheck]": [],
            "profile[sgcheck]": []
        },
        {
            "id": 3243,
            "patch": [
                {
                    "position": "main",
                    "code": "\/\/AT8: Proslje\u0111ivanje prazne matrice funkciji NajvecaSirina\nstd::vector<int> v1;\nstd::vector<int> v2;\n\nstd::cout << \"Sirina: \" << NajvecaSirina(KroneckerovProizvod(v1, v2));",
                    "use_markers": true
                }
            ],
            "compile[debug]": [],
            "execute": {
                "expect": [
                    "Sirina: 0"
                ]
            },
            "debug": [],
            "profile[memcheck]": [],
            "profile[sgcheck]": []
        },
        {
            "id": 3244,
            "patch": [
                {
                    "position": "main",
                    "code": "\/\/AT9: Slucaj kada se funkciji NajvecaSirina proslijedi grbava matrica\n\nstd::cout << \"Sirina: \" << NajvecaSirina({{11, -232, 555}, {1423, 23211}, {-66, 437, 88, -1231239}});",
                    "use_markers": true
                }
            ],
            "compile[debug]": [],
            "execute": {
                "expect": [
                    "Sirina: 8"
                ]
            },
            "debug": [],
            "profile[memcheck]": [],
            "profile[sgcheck]": []
        },
        {
            "id": 3245,
            "patch": [
                {
                    "position": "main",
                    "code": "\/\/AT10: Funkcija NajvecaSirina uzima u obzir i minuse\n\nstd::cout << \"Sirina: \" << NajvecaSirina({{11, -232, 555}, {1423, 23211}}) << std::endl;\nstd::cout << \"Sirina: \" << NajvecaSirina({{11, -232, 555}, {1423, -23211}});",
                    "use_markers": true
                }
            ],
            "compile[debug]": [],
            "execute": {
                "expect": [
                    "Sirina: 5\nSirina: 6"
                ]
            },
            "debug": [],
            "profile[memcheck]": [],
            "profile[sgcheck]": []
        },
        {
            "id": 3246,
            "patch": [
                {
                    "position": "main",
                    "code": "\/\/ AT11: Testiranje funkcije NajvecaSirina kada joj se proslijedi donja \n\/\/ granica cjelobrojnih vrijednosti\nstd::cout << \"Sirina: \" << NajvecaSirina({{1, -2, 3}, {-4, std::numeric_limits<int>::min()}}) << std::endl;",
                    "use_markers": true
                },
                {
                    "position": "top_of_file",
                    "code": "#include<limits>",
                    "use_markers": true
                }
            ],
            "compile[debug]": [],
            "execute": {
                "expect": [
                    "Sirina: 11\n"
                ]
            },
            "debug": [],
            "profile[memcheck]": [],
            "profile[sgcheck]": []
        },
        {
            "id": 3247,
            "patch": [
                {
                    "position": "main",
                    "code": "\/\/ AT11: Testiranje funkcije NajvecaSirina kada joj se proslijedi gornja \n\/\/ granica cjelobrojnih vrijednosti\nstd::cout << \"Sirina: \" << NajvecaSirina({{1, -2, 3}, {-4, std::numeric_limits<int>::max()}}) << std::endl;",
                    "use_markers": true
                },
                {
                    "position": "top_of_file",
                    "code": "#include<limits>",
                    "use_markers": true
                }
            ],
            "compile[debug]": [],
            "execute": {
                "expect": [
                    "Sirina: 10\n"
                ]
            },
            "debug": [],
            "profile[memcheck]": [],
            "profile[sgcheck]": []
        },
        {
            "id": 3248,
            "patch": [
                {
                    "position": "main",
                    "code": "    {\/\/AT13: testiramo funkciju NajvecaSirina za slucaj kada je najveci broj matrice manje sirine nego neki negativan broj\n        std::cout << NajvecaSirina({{2000, 1999, 2001}, {2000, -1000, 9999}}); \/\/najveca sirina = 5 (broj -1000)\n    }",
                    "use_markers": true
                }
            ],
            "compile[debug]": [],
            "execute": {
                "expect": [
                    "5"
                ]
            },
            "debug": [],
            "profile[memcheck]": [],
            "profile[sgcheck]": []
        },
        {
            "id": 3249,
            "patch": [
                {
                    "position": "main",
                    "code": "    {\/\/AT14: sli\u010dno kao i test 13, samo testiramo main i ispis (najve\u0107i broj nema najve\u0107u \u0161irinu)\n        _main(); \/\/unos: 2 9999 -1000 2 1 1\n    }",
                    "use_markers": true
                }
            ],
            "compile[debug]": [],
            "execute": {
                "environment": {
                    "stdin": "2 9999 -1000 2 1 1\n"
                },
                "expect": [
                    "Unesite broj elemenata prvog vektora: Unesite elemente prvog vektora: Unesite broj elemenata drugog vektora: Unesite elemente drugog vektora:                                                                           \n  9999  9999                                \n -1000 -1000 "
                ]
            },
            "debug": [],
            "profile[memcheck]": {
                "environment": {
                    "stdin": "2 9999 -1000 2 1 1\n"
                }
            },
            "profile[sgcheck]": {
                "environment": {
                    "stdin": "2 9999 -1000 2 1 1\n"
                }
            }
        }
    ]
}
